// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  profile       UserProfile?
  trips         Trip[]
  Routine       Routine[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  carType   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profile")
}

model Trip {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startCoordinates Json
  endCoordinates   Json

  travelTime     Int
  travelDistance Int
  travelMode     String
  travelType     String

  routineAlerts RoutineAlert[]

  @@map("trip")
}

model Risk {
  id              String   @id
  coordinates     Json
  riskLevel       Int
  riskDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("risk")
}

model RiskReport {
  id              String   @id
  coordinates     Json
  riskLevel       Int
  riskDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("risk_report")
}

// ...existing code...

model RoutineAlert {
  id          String   @id
  tripId      String
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  arrivalTime DateTime
  cronString  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("routine_alert")
}

model Routine {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  startLocation   String
  startCoordinates Json
  endLocation     String
  endCoordinates  Json
  startTime       String   // Format: "HH:MM"
  repeatDays      String[] // Array of days: ["monday", "tuesday", etc.]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("routine")
}